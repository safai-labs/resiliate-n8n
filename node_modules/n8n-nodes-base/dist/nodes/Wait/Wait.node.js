"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wait = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const description_1 = require("../Webhook/description");
const Webhook_node_1 = require("../Webhook/Webhook.node");
const displayOnWebhook = {
    show: {
        resume: ['webhook'],
    },
};
class Wait extends Webhook_node_1.Webhook {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.authPropertyName = 'incomingAuthentication';
        this.description = {
            displayName: 'Wait',
            name: 'wait',
            icon: 'fa:pause-circle',
            group: ['organization'],
            version: 1,
            description: 'Wait before continue with execution',
            defaults: {
                name: 'Wait',
                color: '#804050',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: (0, description_1.credentialsProperty)(this.authPropertyName),
            webhooks: [
                {
                    ...description_1.defaultWebhookDescription,
                    responseData: '={{$parameter["responseData"]}}',
                    path: '={{$parameter["options"]["webhookSuffix"] || ""}}',
                    restartWebhook: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resume',
                    name: 'resume',
                    type: 'options',
                    options: [
                        {
                            name: 'After Time Interval',
                            value: 'timeInterval',
                            description: 'Waits for a certain amount of time',
                        },
                        {
                            name: 'At Specified Time',
                            value: 'specificTime',
                            description: 'Waits until a specific date and time to continue',
                        },
                        {
                            name: 'On Webhook Call',
                            value: 'webhook',
                            description: 'Waits for a webhook call before continuing',
                        },
                    ],
                    default: 'timeInterval',
                    description: 'Determines the waiting mode to use before the workflow continues',
                },
                {
                    ...(0, description_1.authenticationProperty)(this.authPropertyName),
                    description: 'If and how incoming resume-webhook-requests to $execution.resumeUrl should be authenticated for additional security',
                    displayOptions: displayOnWebhook,
                },
                {
                    displayName: 'Date and Time',
                    name: 'dateTime',
                    type: 'dateTime',
                    displayOptions: {
                        show: {
                            resume: ['specificTime'],
                        },
                    },
                    default: '',
                    description: 'The date and time to wait for before continuing',
                },
                {
                    displayName: 'Wait Amount',
                    name: 'amount',
                    type: 'number',
                    displayOptions: {
                        show: {
                            resume: ['timeInterval'],
                        },
                    },
                    typeOptions: {
                        minValue: 0,
                        numberPrecision: 2,
                    },
                    default: 1,
                    description: 'The time to wait',
                },
                {
                    displayName: 'Wait Unit',
                    name: 'unit',
                    type: 'options',
                    displayOptions: {
                        show: {
                            resume: ['timeInterval'],
                        },
                    },
                    options: [
                        {
                            name: 'Seconds',
                            value: 'seconds',
                        },
                        {
                            name: 'Minutes',
                            value: 'minutes',
                        },
                        {
                            name: 'Hours',
                            value: 'hours',
                        },
                        {
                            name: 'Days',
                            value: 'days',
                        },
                    ],
                    default: 'hours',
                    description: 'The time unit of the Wait Amount value',
                },
                {
                    displayName: 'The webhook URL will be generated at run time. It can be referenced with the <strong>$execution.resumeUrl</strong> variable. Send it somewhere before getting to this node. <a href="https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/?utm_source=n8n_app&utm_medium=node_settings_modal-credential_link&utm_campaign=n8n-nodes-base.wait" target="_blank">More info</a>',
                    name: 'webhookNotice',
                    type: 'notice',
                    displayOptions: displayOnWebhook,
                    default: '',
                },
                {
                    ...description_1.httpMethodsProperty,
                    displayOptions: displayOnWebhook,
                    description: 'The HTTP method of the Webhook call',
                },
                {
                    ...description_1.responseCodeProperty,
                    displayOptions: displayOnWebhook,
                },
                {
                    ...description_1.responseModeProperty,
                    displayOptions: displayOnWebhook,
                },
                {
                    ...description_1.responseDataProperty,
                    displayOptions: {
                        show: {
                            ...(_a = description_1.responseDataProperty.displayOptions) === null || _a === void 0 ? void 0 : _a.show,
                            ...displayOnWebhook.show,
                        },
                    },
                },
                {
                    ...description_1.responseBinaryPropertyNameProperty,
                    displayOptions: {
                        show: {
                            ...(_b = description_1.responseBinaryPropertyNameProperty.displayOptions) === null || _b === void 0 ? void 0 : _b.show,
                            ...displayOnWebhook.show,
                        },
                    },
                },
                {
                    displayName: 'Limit Wait Time',
                    name: 'limitWaitTime',
                    type: 'boolean',
                    default: false,
                    description: 'If no webhook call is received, the workflow will automatically resume execution after the specified limit type',
                    displayOptions: displayOnWebhook,
                },
                {
                    displayName: 'Limit Type',
                    name: 'limitType',
                    type: 'options',
                    default: 'afterTimeInterval',
                    description: 'Sets the condition for the execution to resume. Can be a specified date or after some time.',
                    displayOptions: {
                        show: {
                            limitWaitTime: [true],
                            ...displayOnWebhook.show,
                        },
                    },
                    options: [
                        {
                            name: 'After Time Interval',
                            description: 'Waits for a certain amount of time',
                            value: 'afterTimeInterval',
                        },
                        {
                            name: 'At Specified Time',
                            description: 'Waits until the set date and time to continue',
                            value: 'atSpecifiedTime',
                        },
                    ],
                },
                {
                    displayName: 'Amount',
                    name: 'resumeAmount',
                    type: 'number',
                    displayOptions: {
                        show: {
                            limitType: ['afterTimeInterval'],
                            limitWaitTime: [true],
                            ...displayOnWebhook.show,
                        },
                    },
                    typeOptions: {
                        minValue: 0,
                        numberPrecision: 2,
                    },
                    default: 1,
                    description: 'The time to wait',
                },
                {
                    displayName: 'Unit',
                    name: 'resumeUnit',
                    type: 'options',
                    displayOptions: {
                        show: {
                            limitType: ['afterTimeInterval'],
                            limitWaitTime: [true],
                            ...displayOnWebhook.show,
                        },
                    },
                    options: [
                        {
                            name: 'Seconds',
                            value: 'seconds',
                        },
                        {
                            name: 'Minutes',
                            value: 'minutes',
                        },
                        {
                            name: 'Hours',
                            value: 'hours',
                        },
                        {
                            name: 'Days',
                            value: 'days',
                        },
                    ],
                    default: 'hours',
                    description: 'Unit of the interval value',
                },
                {
                    displayName: 'Max Date and Time',
                    name: 'maxDateAndTime',
                    type: 'dateTime',
                    displayOptions: {
                        show: {
                            limitType: ['atSpecifiedTime'],
                            limitWaitTime: [true],
                            ...displayOnWebhook.show,
                        },
                    },
                    default: '',
                    description: 'Continue execution after the specified date and time',
                },
                {
                    ...description_1.optionsProperty,
                    displayOptions: displayOnWebhook,
                    options: [
                        ...description_1.optionsProperty.options,
                        {
                            displayName: 'Webhook Suffix',
                            name: 'webhookSuffix',
                            type: 'string',
                            default: '',
                            placeholder: 'webhook',
                            description: 'This suffix path will be appended to the restart URL. Helpful when using multiple wait nodes. Note: Does not support expressions.',
                        },
                    ],
                },
            ],
        };
    }
    async execute(context) {
        const resume = context.getNodeParameter('resume', 0);
        if (resume === 'webhook') {
            return this.handleWebhookResume(context);
        }
        let waitTill;
        if (resume === 'timeInterval') {
            const unit = context.getNodeParameter('unit', 0);
            let waitAmount = context.getNodeParameter('amount', 0);
            if (unit === 'minutes') {
                waitAmount *= 60;
            }
            if (unit === 'hours') {
                waitAmount *= 60 * 60;
            }
            if (unit === 'days') {
                waitAmount *= 60 * 60 * 24;
            }
            waitAmount *= 1000;
            waitTill = new Date(new Date().getTime() + waitAmount);
        }
        else {
            const dateTime = context.getNodeParameter('dateTime', 0);
            waitTill = new Date(dateTime);
        }
        const waitValue = Math.max(waitTill.getTime() - new Date().getTime(), 0);
        if (waitValue < 65000) {
            return new Promise((resolve, _reject) => {
                setTimeout(() => {
                    resolve([context.getInputData()]);
                }, waitValue);
            });
        }
        return this.putToWait(context, waitTill);
    }
    async handleWebhookResume(context) {
        let waitTill = new Date(n8n_workflow_1.WAIT_TIME_UNLIMITED);
        const limitWaitTime = context.getNodeParameter('limitWaitTime', 0);
        if (limitWaitTime === true) {
            const limitType = context.getNodeParameter('limitType', 0);
            if (limitType === 'afterTimeInterval') {
                let waitAmount = context.getNodeParameter('resumeAmount', 0);
                const resumeUnit = context.getNodeParameter('resumeUnit', 0);
                if (resumeUnit === 'minutes') {
                    waitAmount *= 60;
                }
                if (resumeUnit === 'hours') {
                    waitAmount *= 60 * 60;
                }
                if (resumeUnit === 'days') {
                    waitAmount *= 60 * 60 * 24;
                }
                waitAmount *= 1000;
                waitTill = new Date(new Date().getTime() + waitAmount);
            }
            else {
                waitTill = new Date(context.getNodeParameter('maxDateAndTime', 0));
            }
        }
        return this.putToWait(context, waitTill);
    }
    async putToWait(context, waitTill) {
        await context.putExecutionToWait(waitTill);
        return [context.getInputData()];
    }
}
exports.Wait = Wait;
//# sourceMappingURL=Wait.node.js.map