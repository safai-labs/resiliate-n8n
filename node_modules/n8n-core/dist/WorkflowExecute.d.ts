import PCancelable from 'p-cancelable';
import type { ExecutionError, IConnection, INode, INodeExecutionData, IPinData, IRun, IRunData, Workflow } from 'n8n-workflow';
import { IRunExecutionData, IWorkflowExecuteAdditionalData, WorkflowExecuteMode } from 'n8n-workflow';
export declare class WorkflowExecute {
    runExecutionData: IRunExecutionData;
    private additionalData;
    private mode;
    private status;
    constructor(additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, runExecutionData?: IRunExecutionData);
    run(workflow: Workflow, startNode?: INode, destinationNode?: string, pinData?: IPinData): PCancelable<IRun>;
    forceInputNodeExecution(workflow: Workflow): boolean;
    runPartialWorkflow(workflow: Workflow, runData: IRunData, startNodes: string[], destinationNode?: string, pinData?: IPinData): PCancelable<IRun>;
    executeHook(hookName: string, parameters: any[]): Promise<void>;
    moveNodeMetadata(): void;
    incomingConnectionIsEmpty(runData: IRunData, inputConnections: IConnection[], runIndex: number): boolean;
    prepareWaitingToExecution(nodeName: string, numberOfConnections: number, runIndex: number): void;
    addNodeToBeExecuted(workflow: Workflow, connectionData: IConnection, outputIndex: number, parentNodeName: string, nodeSuccessData: INodeExecutionData[][], runIndex: number): void;
    processRunExecutionData(workflow: Workflow): PCancelable<IRun>;
    processSuccessExecution(startedAt: Date, workflow: Workflow, executionError?: ExecutionError, closeFunction?: Promise<void>): Promise<IRun>;
    getFullRunData(startedAt: Date): IRun;
}
