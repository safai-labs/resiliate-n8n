"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMappingColumns = void 0;
const GoogleSheet_1 = require("../helpers/GoogleSheet");
const GoogleSheets_types_1 = require("../helpers/GoogleSheets.types");
const GoogleSheets_utils_1 = require("../helpers/GoogleSheets.utils");
async function getMappingColumns() {
    const { mode, value } = this.getNodeParameter('documentId', 0);
    const spreadsheetId = (0, GoogleSheets_utils_1.getSpreadsheetId)(mode, value);
    const sheet = new GoogleSheet_1.GoogleSheet(spreadsheetId, this);
    let sheetWithinDocument = this.getNodeParameter('sheetName', undefined, {
        extractValue: true,
    });
    if (sheetWithinDocument === 'gid=0') {
        sheetWithinDocument = '0';
    }
    const sheetName = await sheet.spreadsheetGetSheetNameById(sheetWithinDocument);
    const sheetData = await sheet.getData(`${sheetName}!1:1`, 'FORMATTED_VALUE');
    const columns = sheet.testFilter(sheetData || [], 0, 0).filter((col) => col !== '');
    const fields = columns.map((col) => ({
        id: col,
        displayName: col,
        required: false,
        defaultMatch: col === 'id',
        display: true,
        type: 'string',
        canBeUsedToMatch: true,
    }));
    const operation = this.getNodeParameter('operation', 0);
    if (operation === 'update') {
        fields.push({
            id: GoogleSheets_types_1.ROW_NUMBER,
            displayName: GoogleSheets_types_1.ROW_NUMBER,
            required: false,
            defaultMatch: false,
            display: true,
            type: 'string',
            canBeUsedToMatch: true,
            readOnly: true,
            removed: true,
        });
    }
    return { fields };
}
exports.getMappingColumns = getMappingColumns;
//# sourceMappingURL=resourceMapping.js.map