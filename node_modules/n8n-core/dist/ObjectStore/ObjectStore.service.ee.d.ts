/// <reference types="node" />
/// <reference types="node" />
import type { AxiosResponse } from 'axios';
import type { Bucket, ConfigSchemaCredentials, ListPage } from './types';
import type { Readable } from 'stream';
import type { BinaryData } from '..';
export declare class ObjectStoreService {
    private host;
    private bucket;
    private credentials;
    private isReady;
    private isReadOnly;
    private logger;
    init(host: string, bucket: Bucket, credentials: ConfigSchemaCredentials): Promise<void>;
    setReadonly(newState: boolean): void;
    setReady(newState: boolean): void;
    checkConnection(): Promise<AxiosResponse<unknown> | undefined>;
    put(filename: string, buffer: Buffer, metadata?: BinaryData.PreWriteMetadata): Promise<AxiosResponse<any>>;
    get(fileId: string, { mode }: {
        mode: 'buffer';
    }): Promise<Buffer>;
    get(fileId: string, { mode }: {
        mode: 'stream';
    }): Promise<Readable>;
    getMetadata(fileId: string): Promise<{
        'content-length': string;
        'content-type'?: string | undefined;
        'x-amz-meta-filename'?: string | undefined;
    } & BinaryData.PreWriteMetadata>;
    deleteOne(fileId: string): Promise<AxiosResponse<unknown>>;
    deleteMany(prefix: string): Promise<AxiosResponse<unknown> | undefined>;
    list(prefix: string): Promise<{
        key: string;
        lastModified: string;
        eTag: string;
        size: number;
        storageClass: string;
    }[]>;
    getListPage(prefix: string, nextPageToken?: string): Promise<ListPage>;
    private toPath;
    private blockWrite;
    private request;
}
