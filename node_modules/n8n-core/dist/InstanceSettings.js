"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceSettings = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const crypto_1 = require("crypto");
const typedi_1 = require("typedi");
const n8n_workflow_1 = require("n8n-workflow");
let InstanceSettings = class InstanceSettings {
    constructor() {
        this.userHome = this.getUserHome();
        this.n8nFolder = path_1.default.join(this.userHome, '.n8n');
        this.customExtensionDir = path_1.default.join(this.n8nFolder, 'custom');
        this.nodesDownloadDir = path_1.default.join(this.n8nFolder, 'nodes');
        this.settingsFile = path_1.default.join(this.n8nFolder, 'config');
        this.settings = this.loadOrCreate();
        this.instanceId = this.generateInstanceId();
    }
    get encryptionKey() {
        return this.settings.encryptionKey;
    }
    get tunnelSubdomain() {
        return this.settings.tunnelSubdomain;
    }
    update(newSettings) {
        this.save({ ...this.settings, ...newSettings });
    }
    getUserHome() {
        var _a, _b;
        const homeVarName = process.platform === 'win32' ? 'USERPROFILE' : 'HOME';
        return (_b = (_a = process.env.N8N_USER_FOLDER) !== null && _a !== void 0 ? _a : process.env[homeVarName]) !== null && _b !== void 0 ? _b : process.cwd();
    }
    loadOrCreate() {
        var _a;
        let settings;
        const { settingsFile } = this;
        if ((0, fs_1.existsSync)(settingsFile)) {
            const content = (0, fs_1.readFileSync)(settingsFile, 'utf8');
            settings = (0, n8n_workflow_1.jsonParse)(content, {
                errorMessage: `Error parsing n8n-config file "${settingsFile}". It does not seem to be valid JSON.`,
            });
        }
        else {
            (0, fs_1.mkdirSync)(this.n8nFolder, { recursive: true });
            const encryptionKey = (_a = process.env.N8N_ENCRYPTION_KEY) !== null && _a !== void 0 ? _a : (0, crypto_1.randomBytes)(24).toString('base64');
            settings = { encryptionKey };
            this.save(settings);
        }
        const { encryptionKey, tunnelSubdomain } = settings;
        return { encryptionKey, tunnelSubdomain };
    }
    generateInstanceId() {
        const { encryptionKey } = this;
        return (0, crypto_1.createHash)('sha256')
            .update(encryptionKey.slice(Math.round(encryptionKey.length / 2)))
            .digest('hex');
    }
    save(settings) {
        this.settings = settings;
        (0, fs_1.writeFileSync)(this.settingsFile, JSON.stringify(settings, null, '\t'), 'utf-8');
    }
};
exports.InstanceSettings = InstanceSettings;
exports.InstanceSettings = InstanceSettings = __decorate([
    (0, typedi_1.Service)()
], InstanceSettings);
//# sourceMappingURL=InstanceSettings.js.map