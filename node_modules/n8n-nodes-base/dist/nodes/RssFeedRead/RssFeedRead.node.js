"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RssFeedRead = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const rss_parser_1 = __importDefault(require("rss-parser"));
const url_1 = require("url");
const utilities_1 = require("../../utils/utilities");
function validateURL(url) {
    try {
        new url_1.URL(url);
        return true;
    }
    catch (err) {
        return false;
    }
}
class RssFeedRead {
    constructor() {
        this.description = {
            displayName: 'RSS Read',
            name: 'rssFeedRead',
            icon: 'fa:rss',
            group: ['input'],
            version: 1,
            description: 'Reads data from an RSS Feed',
            defaults: {
                name: 'RSS Read',
                color: '#b02020',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'URL',
                    name: 'url',
                    type: 'string',
                    default: '',
                    required: true,
                    description: 'URL of the RSS feed',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Ignore SSL Issues',
                            name: 'ignoreSSL',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to ignore SSL/TLS certificate issues or not',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const pairedItem = (0, utilities_1.generatePairedItemData)(this.getInputData().length);
        try {
            const url = this.getNodeParameter('url', 0);
            const options = this.getNodeParameter('options', 0);
            const ignoreSSL = Boolean(options.ignoreSSL);
            if (!url) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The parameter "URL" has to be set!');
            }
            if (!validateURL(url)) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'The provided "URL" is not valid!');
            }
            const parser = new rss_parser_1.default({
                requestOptions: {
                    rejectUnauthorized: !ignoreSSL,
                },
            });
            let feed;
            try {
                feed = await parser.parseURL(url);
            }
            catch (error) {
                if (error.code === 'ECONNREFUSED') {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `It was not possible to connect to the URL. Please make sure the URL "${url}" it is valid!`);
                }
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), error);
            }
            const returnData = [];
            if (feed.items) {
                feed.items.forEach((item) => {
                    returnData.push({
                        json: item,
                        pairedItem,
                    });
                });
            }
            return [returnData];
        }
        catch (error) {
            if (this.continueOnFail()) {
                return [[{ json: { error: error.message }, pairedItem }]];
            }
            throw error;
        }
    }
}
exports.RssFeedRead = RssFeedRead;
//# sourceMappingURL=RssFeedRead.node.js.map