"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenOutput = exports.processAirtableError = exports.findMatches = exports.removeIgnored = void 0;
function removeIgnored(data, ignore) {
    if (ignore) {
        let ignoreFields = [];
        if (typeof ignore === 'string') {
            ignoreFields = ignore.split(',').map((field) => field.trim());
        }
        else {
            ignoreFields = ignore;
        }
        const newData = {};
        for (const field of Object.keys(data)) {
            if (!ignoreFields.includes(field)) {
                newData[field] = data[field];
            }
        }
        return newData;
    }
    else {
        return data;
    }
}
exports.removeIgnored = removeIgnored;
function findMatches(data, keys, fields, updateAll) {
    if (updateAll) {
        const matches = data.filter((record) => {
            for (const key of keys) {
                if (record.fields[key] !== fields[key]) {
                    return false;
                }
            }
            return true;
        });
        if (!(matches === null || matches === void 0 ? void 0 : matches.length)) {
            throw new Error('No records match provided keys');
        }
        return matches;
    }
    else {
        const match = data.find((record) => {
            for (const key of keys) {
                if (record.fields[key] !== fields[key]) {
                    return false;
                }
            }
            return true;
        });
        if (!match) {
            throw new Error('Record matching provided keys was not found');
        }
        return [match];
    }
}
exports.findMatches = findMatches;
function processAirtableError(error, id) {
    var _a;
    if (error.description === 'NOT_FOUND' && id) {
        error.description = `${id} is not a valid Record ID`;
    }
    if (((_a = error.description) === null || _a === void 0 ? void 0 : _a.includes('You must provide an array of up to 10 record objects')) && id) {
        error.description = `${id} is not a valid Record ID`;
    }
    return error;
}
exports.processAirtableError = processAirtableError;
const flattenOutput = (record) => {
    const { fields, ...rest } = record;
    return {
        ...rest,
        ...fields,
    };
};
exports.flattenOutput = flattenOutput;
//# sourceMappingURL=utils.js.map